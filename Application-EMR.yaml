---
AWSTemplateFormatVersion: '2010-09-09'
Description: EMR Stack
  This creates a analytics EMR application cluster with 1 master nodes and 2 slave nodes, it also creates EMR Kerberos configuration and attaches to ActiveDirectory.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - WindowsBastionsStackName
          - VPNStackName
          - VPCStackName
          - BucketsStackName
          - TopicsStackName
          - KeysStackName
          - CodesStackName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
      - Label:
          default: Application Configuration
        Parameters:
          - ApplicationName
      - Label:
          default: AWS Security
        Parameters:
        - KeyName
      - Label:
          default: EMR
        Parameters:
        - EmrSubnetA
        - EmrLogBucketDnsName
        - EmrMasterInstanceType
        - EmrCoreInstanceType
        - EmrCoreNodes
        - JobFlowRole
        - ServiceRole
      - Label:
          default: Cross-realm Trust Configuration
        Parameters:
          - KerberosRealm
          - CrossRealmTrustPrincipalPassword
          - KerberosADdomain
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainAdminUser
          - ADDomainJoinPassword
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      WindowsBastionsStackName:
        default: WindowsBastions Stack Name
      VPNStackName:
        default: VPN Stack Name
      VPCStackName:
        default: VPC Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      KeysStackName:
        default: Keys Stack Name
      CodesStackName:
        default: Codes Stack Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      ApplicationName:
        default: Application Name
Parameters:
  WindowsBastionsStackName:
    Description: Name of the CloudFormation Stack containing the Windows Bastions
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 6
    MaxLength: 64
    Default: Core-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BuildBucketsStackName:
    Description: Name of the CloudFormation Stack containing Build Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: BuildBuckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: example
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
      - 4xlarge
      - 8xlarge
    ConstraintDescription: must be micro, small, medium, large, xlarge, 2xlarge, 4xlarge or 8xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 2
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.'
  ApplicationName:
    Description: Name of the Application associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: EMR
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  EmrLogBucketDnsName:
    Description: EMR Log Bucket DNS name
    Type: String
  EmrMasterInstanceType:
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    Default: m4.large
    Description: Instance type for the EMR master node. Default is c4.xlarge
    Type: String
  EmrCoreInstanceType:
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    Default: c4.xlarge
    Description: Instance type for the EMR core nodes. Default is c4.xlarge
    Type: String
  EmrCoreNodes:
    Description: Number of EMR Core Nodes. Minimum 1
    MaxValue: '500'
    MinValue: '1'
    Type: Number
    Default: '2'
  # EmrSecurityGroup:
  #   Description: Talend EMR Security Group.
  #   Type: String
  RemoteAccessEmrSecurityGroup:
    Description: Remote access EMR Security Group.
    Type: String
  # EmrMasterSecurityGroup:
  #   Description: EMR Naster Security Group.
  #   Type: String
  # EmrSlaveSecurityGroup:
  #   Description: EMR Slave Security Group.
  #   Type: String
  # EmrServiceAccessSecurityGroup:
  #   Description: EMR Service Access Security Group.
  #   Type: String
  DocVersion:
    AllowedPattern: ^([-]?[0-9]{1,2}v{1}[0-9]{2}){0,1}$
    ConstraintDescription: Documents Version prefix with format -00v00 or not present.
    Default: '-1v03'
    Description: Document Version prefix can include numbers, lowercase letter v,  hyphen (-) in pattern -00v00.
    Type: String
  KerberosRealm:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: C.DAPJ.DXCANALYTICS.COM
    Description: Cluster's Kerberos realm name. VPC's domain name e.g. EC2.INTERNAL
    MaxLength: '36'
    MinLength: '3'
    Type: String
  KerberosADdomain:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: C.AD.DAPJ.DXCANALYTICS.COM
    Description: The AD domain that you want to trust. e.g., EXAMPLE.COM
    MaxLength: '35'
    MinLength: '3'
    Type: String
  CrossRealmTrustPrincipalPassword:
    Description: Password that you want to use for your cross-realm trust
    Default: 'Temp-12345'
    MaxLength: '32'
    MinLength: '5'
    NoEcho: 'true'
    Type: String
  ADDomainJoinPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DomainAdminUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: Admin
    Description: User name for the account that will be added as Domain Administrator. This is separate from the default "Administrator" account
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: c.ad.dapj.dxcanalytics.com
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
    MaxLength: '255'
    MinLength: '2'
    Type: String
  JobFlowRole:
    Description: 'EMR Job Flow EC2 Role'
    Type: String
    Default: arn:aws:iam::581524105996:instance-profile/EMR_EC2_DefaultRole
  ServiceRole:
    Description: 'EMR Service Role'
    Type: String
    Default: arn:aws:iam::581524105996:role/EMR_DefaultRole
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: emr-cluster-eu-west-1
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: modules
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Mappings:
  RegionMap:
    ap-northeast-1:
      Version: emr-5.26.0
    ap-northeast-2:
      Version: emr-5.26.0
    ap-south-1:
      Version: emr-5.26.0
    ap-southeast-1:
      Version: emr-5.26.0
    ap-southeast-2:
      Version: emr-5.26.0
    ca-central-1:
      Version: emr-5.26.0
    eu-central-1:
      Version: emr-5.26.0
    eu-west-1:
      Version: emr-5.26.0
    eu-west-2:
      Version: emr-5.26.0
    sa-east-1:
      Version: emr-5.26.0
    us-east-1:
      Version: emr-5.26.0
    us-east-2:
      Version: emr-5.0.1
    us-west-1:
      Version: emr-5.26.0
    us-west-2:
      Version: emr-5.26.0
Conditions:
  GovCloudCondition: !Equals [!Ref 'AWS::Region', us-gov-west-1]
  ConfigureWindowsBastionsIntegration: !Not [ !Equals [ !Ref WindowsBastionsStackName, '' ]]
  ConfigureVPNIntegration: !Not [ !Equals [ !Ref VPNStackName, '' ]]
  # ConfigureAdminPassword: !Not [ !Equals [ !Ref DirectoryAdministratorPassword, '' ]]
  # GenerateAdminPassword: !Not [ !Condition ConfigureAdminPassword ]
Resources:
  # EmrServiceRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - elasticmapreduce.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'
  # EmrEc2Role:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'
  # InstanceProfile:
  #   Type: 'AWS::IAM::InstanceProfile'
  #   Properties:
  #     # InstanceProfileName: !Ref EmrEc2Role
  #     Roles:
  #       - !Ref EmrEc2Role
  # ADDomainJoinPassword:
  # Type: AWS::SecretsManager::Secret
  # Properties:
  #   Name: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
  #   Description: !Sub Password for the ${EnvironmentName} Environment ${UtilityName} Utility Admin User (Admin)
  #   SecretString: !If [ ConfigureAdminPassword, !Ref DirectoryAdministratorPassword, !Ref 'AWS::NoValue' ]
  #   GenerateSecretString: !If
  #     - GenerateAdminPassword
  #     - PasswordLength: 32
  #       ExcludePunctuation: true
  #     - !Ref AWS::NoValue
  #   Tags:
  #     - Key: Name
  #       Value: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
  EmrMasterPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-EmrMasterPrivateSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ClientSecurityGroup
          Description: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup (MySQL)
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (MySQL)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (MySQL)
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Global (All)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-DatabaseSecurityGroup
  EmrSlavePrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EMR Slave Instance security group
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
  EmrServiceAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EMR Service Access security group
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
  TCPFromServiceAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      ToPort: 8443
  TCPFromSlaveSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPFromMasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  ICMPFromSlaveSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: -1
  ICMPFromMasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: -1
  UDPFromSlaveSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  UDPFromMasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPFromServiceAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      ToPort: 8443
  TCPFromSlaveIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPFromMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  ICMPFromSlaveIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: -1
  ICMPFromMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: -1
  UDPFromSlaveIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  UDPFromMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPMasterEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      IpProtocol: tcp
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 8443
  TCPSlaveEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      IpProtocol: tcp
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 8443
  SecurityConfiguration:
    Type: 'AWS::EMR::SecurityConfiguration'
    Properties:
      SecurityConfiguration:
        AuthenticationConfiguration:
          KerberosConfiguration:
            ClusterDedicatedKdcConfiguration:
              CrossRealmTrustConfiguration:
                Realm: !Ref KerberosADdomain
                KdcServer: !Ref DomainDNSName
                Domain: !Ref DomainDNSName
                AdminServer: !Ref DomainDNSName
              TicketLifetimeInHours: 24
            Provider: ClusterDedicatedKdc
  EmrInstance:
    Type: AWS::EMR::Cluster
    Properties:
      Instances:
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType:
            Ref: EmrMasterInstanceType
          Market: ON_DEMAND
          Name: Master
        CoreInstanceGroup:
          InstanceCount:
            Ref: EmrCoreNodes
          InstanceType:
            Ref: EmrCoreInstanceType
          Market: ON_DEMAND
          Name: Core
        TerminationProtected: false
        Ec2SubnetId: !ImportValue
          Fn::Sub: ${VPCStackName}-IdentitySubnetA
        Ec2KeyName:
          Ref: KeyName
        EmrManagedMasterSecurityGroup: !GetAtt EmrMasterPrivateSecurityGroup.GroupId
        EmrManagedSlaveSecurityGroup: !GetAtt EmrSlavePrivateSecurityGroup.GroupId
        ServiceAccessSecurityGroup: !GetAtt EmrServiceAccessSecurityGroup.GroupId
# #        AdditionalMasterSecurityGroups:
#           - Ref: EmrSecurityGroup
#           - Ref: RemoteAccessEmrSecurityGroup
# #        AdditionalSlaveSecurityGroups:
#           - Ref: EmrSecurityGroup
#           - Ref: RemoteAccessEmrSecurityGroup
      BootstrapActions:
        - Name: "create-hfds-home"
          ScriptBootstrapAction:
            Path: "s3://scripts-dxcapd-us-west-2/EMR/create-hdfs-home-ba.sh"
#            Path: !Sub ['s3://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/create-hdfs-home-ba.sh',
#              {QSS3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]}]
      KerberosAttributes:
        ADDomainJoinPassword: !Ref ADDomainJoinPassword
        ADDomainJoinUser: !Ref DomainAdminUser
        CrossRealmTrustPrincipalPassword: !Ref CrossRealmTrustPrincipalPassword
        KdcAdminPassword: !Ref CrossRealmTrustPrincipalPassword
        Realm: !Ref KerberosRealm
      Applications:
        - Name: Hadoop
        - Name: Hive
        - Name: Pig
        - Name: Hue
        - Name: HBase
        - Name: Sqoop
        - Name: ZooKeeper
        - Name: Zeppelin
        - Name: Tez
        - Name: HCatalog
        - Name: Livy
        - Name: Spark
      LogUri:
        Fn::Sub: s3://${EmrLogBucketDnsName}
      ReleaseLabel:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - Version
      Name: EmrInstance
      JobFlowRole: !Ref JobFlowRole
      ServiceRole: !Ref ServiceRole
      VisibleToAllUsers: true
      SecurityConfiguration: !Ref SecurityConfiguration
      Tags:
        - Key: Name
          Value:
            Fn::Sub: emr-instance-${AWS::StackName}
Outputs:
  EmrClusterId:
    Value:
      Ref: EmrInstance
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:EmrClusterId"
  EmrMasterPublicDns:
    Value:
      Fn::GetAtt:
      - EmrInstance
      - MasterPublicDNS
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:EmrMasterPublicDns"
  EMRSecurityConfiguration:
    Value:
      Ref: SecurityConfiguration
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:SecurityConfiguration"
