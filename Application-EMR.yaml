---
AWSTemplateFormatVersion: '2010-09-09'
Description: EMR Stack
  This creates a analytics EMR application cluster with master node(s) and slave node(s), it also creates EMR Kerberos configuration and attaches to ActiveDirectory/DirectoryService.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - WindowsBastionsStackName
          - VPNStackName
          - VPCStackName
          - BucketsStackName
          - LogBucketsStackName
          - TopicsStackName
          - KeysStackName
          - CodesStackName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
      - Label:
          default: Application Configuration
        Parameters:
          - ApplicationName
      - Label:
          default: AWS Security
        Parameters:
        - KeyName
      - Label:
          default: EMR
        Parameters:
        - EmrSubnetA
        - EmrLogBucketDnsName
        - EmrMasterInstanceType
        - EmrCoreInstanceType
        - EmrCoreNodes
        - JobFlowRole
        - ServiceRole
      - Label:
          default: Cross-realm Trust Configuration
        Parameters:
          - KerberosRealm
          - CrossRealmTrustPrincipalPassword
          - KerberosADdomain
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainAdminUser
          - ADDomainJoinPassword
          - DirectoryAdministratorPassword
    ParameterLabels:
      WindowsBastionsStackName:
        default: WindowsBastions Stack Name
      VPNStackName:
        default: VPN Stack Name
      VPCStackName:
        default: VPC Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      Log BucketsStackName:
        default: Log Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      KeysStackName:
        default: Keys Stack Name
      CodesStackName:
        default: Codes Stack Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      ApplicationName:
        default: Application Name
      DirectoryAdministratorPassword:
        default: Directory Administrator Password
Parameters:
  WindowsBastionsStackName:
    Description: Name of the CloudFormation Stack containing the Windows Bastions
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 6
    MaxLength: 64
    Default: Core-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  LogBucketsStackName:
    Description: Name of the CloudFormation Stack containing Log Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: LogBuckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: example
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
      - 4xlarge
      - 8xlarge
    ConstraintDescription: must be micro, small, medium, large, xlarge, 2xlarge, 4xlarge or 8xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 2
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.'
  ApplicationName:
    Description: Name of the Application associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: EMR
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DirectoryService
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  EmrLogBucketDnsName:
    Description: EMR Log Bucket DNS name
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: archive-logs-dxcapd-us-west-2
    AllowedPattern: ^[-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  EmrMasterInstanceType:
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    Default: m4.large
    Description: Instance type for the EMR master node. Default is c4.xlarge
    Type: String
  EmrCoreInstanceType:
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    Default: c4.xlarge
    Description: Instance type for the EMR core nodes. Default is c4.xlarge
    Type: String
  EmrCoreNodes:
    Description: Number of EMR Core Nodes. Minimum 1
    MaxValue: '500'
    MinValue: '1'
    Type: Number
    Default: '2'
  KerberosRealm:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: D.US-WEST-2.M1.DXC-AP.COM
    Description: Cluster's Kerberos realm name. VPC's domain name e.g. EC2.INTERNAL
    MaxLength: '36'
    MinLength: '3'
    Type: String
  KerberosADdomain:
    Description: The AD domain that you want to trust. e.g., EXAMPLE.COM
    MaxLength: '35'
    MinLength: '3'
    Type: String
    Default: D.AD.M1.DXC-AP.COM
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
  CrossRealmTrustPrincipalPassword:
    Description: Password that you want to use for your cross-realm trust
    Default: ''
    NoEcho: 'true'
    Type: String
    AllowedPattern: (^$|(?=^.{20,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*$)
    ConstraintDescription: must be 20 to 32 character random string format with at least one uppercase, lowercase and digit, if specified.
  DomainAdminUser:
    Default: Admin
    Description: User name for the account that will be added as Domain Administrator. This is separate from the default "Administrator" account
    MaxLength: '25'
    MinLength: '5'
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
  DirectoryAdministratorPassword:
    Description: Optional password for the Enterprise Admin User (If unspecified, generate a random password)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|((?=^.{20,64}$)^[a-z]{1,32}(-[a-z]{1,32}){2,7}$|(?=^.{12,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*$))
    ConstraintDescription: must be 20 to 64 character lowercase hyphenated multiword format,
      or 12 to 32 character random string format with at least one uppercase, lowercase and digit, if specified.
  DomainDNSName:
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
    MaxLength: '255'
    MinLength: '2'
    Type: String
    Default: d.ad.m1.dxc-ap.com
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
  EMRVersion:
    Description: EMR Application Version
    Type: String
    Default: emr-5.27.0
    AllowedValues:
      - emr-5.27.0
      - emr-5.26.0
      - emr-5.25.0
      - emr-5.24.0
Conditions:
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureWindowsBastionsIntegration: !Not [ !Equals [ !Ref WindowsBastionsStackName, '' ]]
  ConfigureVPNIntegration: !Not [ !Equals [ !Ref VPNStackName, '' ]]
  ConfigureAdminPassword: !Not [ !Equals [ !Ref DirectoryAdministratorPassword, '' ]]
  GenerateAdminPassword: !Not [ !Condition ConfigureAdminPassword ]
Resources:
  EmrServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticmapreduce.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      Policies:
        - PolicyName: GetPasswordSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${UtilityName}-AdminPassword-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${UtilityName}-LDAPBindPassword-*
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/EMR/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref Role
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
  EmrMasterPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-EmrMasterPrivateSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (All Traffic)
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ClientSecurityGroup
          Description: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Global (All)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-MasterSecurityGroup
  EmrSlavePrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EMR Slave Instance security group
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (All Traffic)
        # - IpProtocol: -1
        #   FromPort: -1
        #   ToPort: -1
        #   CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-SlaveSecurityGroup
  EmrServiceAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EMR Service Access security group
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (All Traffic)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-ServiceAccessSecurityGroup
  # RemoteAccessEmrSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable EMR remote access
  #     VpcId: !ImportValue
  #       Fn::Sub: ${VPCStackName}-VPC
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 0
  #       ToPort: 65535
  #       CidrIp: 0.0.0.0/0
  # Tags:
  #   - Key: Name
  #     Value: !Sub ${EnvironmentName}-${ApplicationName}-RemoteAccessSecurityGroup
  TCPFromServiceAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      ToPort: 8443
  TCPFromSlaveSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPFromMasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  ICMPFromSlaveSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: -1
  ICMPFromMasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: -1
  UDPFromSlaveSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  UDPFromMasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPFromServiceAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      ToPort: 8443
  TCPFromSlaveIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPFromMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  ICMPFromSlaveIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: -1
  ICMPFromMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: icmp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: -1
  UDPFromSlaveIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 65535
  UDPFromMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      IpProtocol: udp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 65535
  TCPMasterEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      IpProtocol: tcp
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - EmrMasterPrivateSecurityGroup
        - GroupId
      ToPort: 8443
  TCPSlaveEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
        - EmrServiceAccessSecurityGroup
        - GroupId
      IpProtocol: tcp
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - EmrSlavePrivateSecurityGroup
        - GroupId
      ToPort: 8443
  SecurityConfiguration:
    Type: 'AWS::EMR::SecurityConfiguration'
    Properties:
      SecurityConfiguration:
        AuthenticationConfiguration:
          KerberosConfiguration:
            ClusterDedicatedKdcConfiguration:
              CrossRealmTrustConfiguration:
                Realm: !Ref KerberosADdomain
                  # Fn::Transform:
                  #   - Name: String
                  #     Parameters:
                  #       InputString: !ImportValue
                  #         Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
                  #       Operation: Upper
                KdcServer: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
                Domain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
                AdminServer: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
              TicketLifetimeInHours: 24
            Provider: ClusterDedicatedKdc
  EmrCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Instances:
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType:
            Ref: EmrMasterInstanceType
          Market: ON_DEMAND
          Name: !Sub ${EnvironmentName}-${ApplicationName}-Master
        CoreInstanceGroup:
          InstanceCount:
            Ref: EmrCoreNodes
          InstanceType:
            Ref: EmrCoreInstanceType
          Market: ON_DEMAND
          Name: !Sub ${EnvironmentName}-${ApplicationName}-Core
        TerminationProtected: false
        Ec2SubnetId: !ImportValue
          Fn::Sub: ${VPCStackName}-IdentitySubnetA
        Ec2KeyName:
          Ref: KeyName
        EmrManagedMasterSecurityGroup: !GetAtt EmrMasterPrivateSecurityGroup.GroupId
        EmrManagedSlaveSecurityGroup: !GetAtt EmrSlavePrivateSecurityGroup.GroupId
        ServiceAccessSecurityGroup: !GetAtt EmrServiceAccessSecurityGroup.GroupId
      BootstrapActions:
        - Name: "create-hfds-home"
          ScriptBootstrapAction:
            Path: "s3://cf-templates-us-west-1/hlsmtc-emr/templates/create-hdfs-home-ba.sh"
              # - ['s3://${ScriptsBucket}.${s3}.amazonaws.com/EMR/create-hdfs-home-ba.sh',
              # {s3: !If [ConfigureGlobal, s3, !Sub 's3-${AWS::Region}']}]
            # Path: "s3://scripts-dxcapd-us-west-2.s3-us-west-2.amazonaws.com/EMR/create-hdfs-home-ba.sh"
            # Path: 'https://scripts-dxcapd-us-west-2.s3-us-west-2.amazonaws.com/EMR/create-hdfs-home-ba.sh'
            #   - ScriptsBucket: !ImportValue
            #       Fn::Sub: ${BucketsStackName}-ScriptsBucket
            #     s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
            # # # authentication: S3Credentials
      KerberosAttributes:
        ADDomainJoinPassword: !Sub '{{resolve:secretsmanager:${EnvironmentName}-${UtilityName}-AdminPassword}}'
        ADDomainJoinUser: !Ref DomainAdminUser
        CrossRealmTrustPrincipalPassword: !Sub '{{resolve:secretsmanager:${EnvironmentName}-${UtilityName}-AdminPassword}}'
        KdcAdminPassword: !Sub '{{resolve:secretsmanager:${EnvironmentName}-${UtilityName}-AdminPassword}}'
        Realm: !Ref KerberosRealm
      Applications:
        - Name: Hadoop
        - Name: Hive
        - Name: Pig
        - Name: Hue
        - Name: HBase
        - Name: Sqoop
        - Name: ZooKeeper
        - Name: Zeppelin
        - Name: Tez
        - Name: HCatalog
        - Name: Livy
        - Name: Spark
      LogUri: !Sub
        - s3://${ArchiveBucket}
        - ArchiveBucket: !ImportValue
            Fn::Sub: ${LogBucketsStackName}-ArchiveLogsBucket
      ReleaseLabel: !Ref EMRVersion
      Name: EmrCluster
      JobFlowRole: !Ref InstanceProfile
      ServiceRole: !Ref EmrServiceRole
      VisibleToAllUsers: true
      SecurityConfiguration: !Ref SecurityConfiguration
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}
Outputs:
  EmrClusterId:
    Value:
      Ref: EmrCluster
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:EmrClusterId"
  EmrMasterPublicDns:
    Value:
      Fn::GetAtt:
      - EmrCluster
      - MasterPublicDNS
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:EmrMasterPublicDns"
  EMRSecurityConfiguration:
    Value:
      Ref: SecurityConfiguration
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:SecurityConfiguration"
