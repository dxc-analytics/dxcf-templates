AWSTemplateFormatVersion: 2010-09-09
Description: Identity-IdentityProvider Template.
  This creates an IAM Identity Provider.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Identity Provider Configuration
        Parameters:
          - ProviderName
          - ProviderType
          - ProviderMetadata
          - ProviderMetadataUrl
          - ProviderAccessMethod
          - ProviderMasterAccount
    ParameterLabels:
      ProviderName:
        default: Provider Name
      ProviderType:
        default: Provider Type
      ProviderMetadata:
        default: Provider Metadata
      ProviderMetadataUrl:
        default: Provider Metadata URL
      ProviderAccessMethod:
        default: Provider Access Method
      ProviderMasterAccount:
        default: Provider Master Account
Parameters:
  ProviderName:
    Description: Name of the Provider associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: dxchlsbi.okta.com
    AllowedPattern: ^[-.a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters, dashes and periods.
  ProviderType:
    Description: Type of Identity Provider associated with the Stack
    Type: String
    Default: okta
    AllowedValues:
      - duo
      - okta
    ConstraintDescription: must be duo or okta.
  ProviderMetadata:
    Description: XML Metadata of the Identity Provider associated with the Stack
    Type: String
    Default: ''
  ProviderMetadataUrl:
    Description: URL to download XML Metadata of the Identity Provider associated with the Stack
    Type: String
    Default: ''
  ProviderAccessMethod:
    Description: Method by which the Provider will integrate with this Account
    Type: String
    Default: single
    AllowedValues:
      - single
      - master
      - child
    ConstraintDescription: must be single, master or child.
  ProviderMasterAccount:
    Description: AWS Account ID of the Provider Master Account
    Type: String
    Default: ''
    AllowedPattern: (^$|^[0-9]{12}$)
    ConstraintDescription: must be a valid AWS Account ID. Required when ProviderAccessMethod is child.
Rules:
  ValidateRegion:
    Assertions:
      - Assert: !Equals [ !Ref 'AWS::Region', us-east-1 ]
        AssertDescription: This Template can only be used in Region us-east-1.
  ValidateProviderMetadata:
    RuleCondition: !Equals [ !Ref ProviderMetadataUrl, '' ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref ProviderMetadata, '' ]]
        AssertDescription: ProviderMetadata required when ProviderMetadataUrl is blank
  ValidateProviderMetadataUrl:
    RuleCondition: !Equals [ !Ref ProviderMetadata, '' ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref ProviderMetadataUrl, '' ]]
        AssertDescription: ProviderMetadataUrl required when ProviderMetadata is blank
  ValidateProviderMasterAccount:
    RuleCondition: !Equals [ !Ref ProviderAccessMethod, child ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref ProviderMasterAccount, '' ]]
        AssertDescription: ProviderMasterAccount required when ProviderAccessMethod is child
Conditions:
  ConfigureOkta: !Equals [ !Ref ProviderType, okta ]
  ConfigureDuo: !Equals [ !Ref ProviderType, duo ]
  ConfigureSaml: !Or [ !Condition ConfigureOkta, !Condition ConfigureDuo ]
  ConfigureOktaSingleAccount: !And [ !Condition ConfigureOkta, !Equals [ !Ref ProviderAccessMethod, single ]]
  ConfigureOktaMultipleAccountMaster: !And [ !Condition ConfigureOkta, !Equals [ !Ref ProviderAccessMethod, master ]]
  ConfigureOktaMultipleAccountChild: !And [ !Condition ConfigureOkta, !Equals [ !Ref ProviderAccessMethod, child ]]
  ConfigureMetadata: !Not [ !Equals [ !Ref ProviderMetadata, '' ]]
  ConfigureMetadataUrl: !Not [ !Condition ConfigureMetadata ]
Resources:
  OktaSingleAccountUser:
    Type: AWS::IAM::User
    Properties:
      UserName: okta
      Path: /
      Policies:
        - PolicyName: OktaSingleAccountPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListAccountAliases
                Resource: '*'
    Condition: ConfigureOktaSingleAccount
  OktaMultipleAccountMasterUser:
    Type: AWS::IAM::User
    Properties:
      UserName: okta
      Path: /
      Policies:
        - PolicyName: OktaMultipleAccountMasterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListAccountAliases
                  - iam:GetAccountSummary
                  - iam:GetUser
                  - sts:AssumeRole
                Resource: '*'
    Condition: ConfigureOktaMultipleAccountMaster
  OktaMultipleAccountChildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Okta-Idp-cross-account-role # This exact name is required - do not change
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${ProviderMasterAccount}:root
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: OktaMultipleAccountChildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListAccountAliases
                Resource: '*'
    Condition: ConfigureOktaMultipleAccountChild
  MetadataDownloaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MetadataDownloaderRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  SamlIdentityProviderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SamlIdentityProviderRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManageSamlProviderPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListSamlProviders
                  - iam:GetSamlProvider
                  - iam:CreateSamlProvider
                  - iam:UpdateSamlProvider
                  - iam:DeleteSamlProvider
                Resource: "*"
    Condition: ConfigureSaml
  MetadataDownloaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MetadataDownloader
      Description: A Lambda function that can download Metadata from an URL.
      Role: !GetAtt MetadataDownloaderRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let metadataUrl = event.ResourceProperties.MetadataUrl;
            if (! metadataUrl) {
              responseData = {Error: 'MetadataUrl missing'};
              console.error('Error: ' + responseData.Error);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                getContent(metadataUrl).then(function(data) {
                  responseData = {Metadata: data}
                  console.log('Downloaded Metadata from: ' + metadataUrl);
                  response.send(event, context, response.SUCCESS, responseData, metadataUrl);
                }).catch(function(err) {
                  responseData = {Error: 'Failed to download Metadata from ' + metadataUrl};
                  console.error('Error: ' + responseData.Error + ':\n', err);
                  response.send(event, context, response.FAILURE, responseData);
                });
                return;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                return;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
                return;
            }
          };

          const getContent = function(url) {
            return new Promise((resolve, reject) => {
              const lib = url.startsWith('https') ? require('https') : require('http');
              const request = lib.get(url, (response) => {
                if (response.statusCode < 200 || response.statusCode > 299) {
                   reject(new Error('Failed to load page, status code: ' + response.statusCode));
              }

                const body = [];
                response.on('data', (chunk) => body.push(chunk));
                response.on('end', () => resolve(body.join('')));
              });

              request.on('error', (err) => reject(err))
              })
          };
    Condition: ConfigureMetadataUrl
  SamlIdentityProviderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SamlIdentityProvider
      Description: A Lambda function that can create, update or delete an IAM SAML Identity Provider.
      Role: !GetAtt SamlIdentityProviderRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let providerName = event.ResourceProperties.ProviderName;
            if (! providerName) {
              responseData = {Error: 'ProviderName missing'};
              console.error('Error: ' + responseData.Error);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            let providerMetadata = event.ResourceProperties.ProviderMetadata;
            if (! providerMetadata && event.RequestType != 'Delete') {
              responseData = {Error: 'ProviderMetadata missing'};
              console.error('Error: ' + responseData.Error);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            let accountId=context.invokedFunctionArn.split(':')[4];

            const AWS = require('aws-sdk');
            AWS.config.apiVersions = {
              iam: '2010-05-08'
            };

            const iam = new AWS.IAM();

            switch (event.RequestType) {
              case 'Create':
                console.log('Calling: CreateSAMLProvider...');
                params = {
                  Name: providerName,
                  SAMLMetadataDocument: providerMetadata
                };
                iam.createSAMLProvider(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'CreateSAMLProvider call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    responseData = {Arn: data.SAMLProviderArn};
                    console.log('SAML Provider: ' + data.SAMLProviderArn + ' created');
                    response.send(event, context, response.SUCCESS, responseData, data.SAMLProviderArn);
                  }
                });
                break;

              case 'Update':
                console.log('Calling: UpdateSAMLProvider...');
                params = {
                  SAMLProviderArn: 'arn:aws:iam::' + accountId + ':saml-provider/' + providerName,
                  SAMLMetadataDocument: providerMetadata
                };
                iam.updateSAMLProvider(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'UpdateSAMLProvider call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    responseData = {Arn: data.SAMLProviderArn};
                    console.log('SAML Provider: ' + data.SAMLProviderArn + ' updated');
                    response.send(event, context, response.SUCCESS, responseData, data.SAMLProviderArn);
                  }
                });
                break;

              case 'Delete':
                console.log('Calling: DeleteSAMLProvider...');
                params = {
                  SAMLProviderArn: 'arn:aws:iam::' + accountId + ':saml-provider/' + providerName
                };
                iam.deleteSAMLProvider(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DeleteSAMLProvider call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    console.log('SAML Provider: deleted');
                    response.send(event, context, response.SUCCESS, responseData);
                  }
                });
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
    Condition: ConfigureSaml
  MetadataDownloader:
    Type: Custom::MetadataDownloader
    Properties:
      ServiceToken: !GetAtt MetadataDownloaderFunction.Arn
      MetadataUrl: !Ref ProviderMetadataUrl
    Condition: ConfigureMetadataUrl
  SamlIdentityProvider:
    Type: Custom::SamlIdentityProvider
    Properties:
      ServiceToken: !GetAtt SamlIdentityProviderFunction.Arn
      ProviderName: !Ref ProviderName
      ProviderMetadata: !If
        - ConfigureMetadata
        - !Ref ProviderMetadata
        - !If
            - ConfigureMetadataUrl
            - !GetAtt MetadataDownloader.Metadata
            - !Ref AWS::NoValue
    Condition: ConfigureSaml
Outputs:
  SamlIdentityProviderArn:
    Description: The SamlIdentityProvider ARN
    Value: !GetAtt SamlIdentityProvider.Arn
    Export:
      Name: !Sub ${AWS::StackName}-SamlIdentityProviderArn
    Condition: ConfigureSaml
